==== tests/cases/conformance/parser/ecmascript5/parserRealSource7.ts (303 errors) ====
    // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
    // See LICENSE.txt in the project root for complete license information.
    
    ///<reference path='typescript.ts' />
                       ~~~~~~~~~~~~~~~
!!! File 'typescript.ts' not found.
    
    module TypeScript {
        export class Continuation {
            public exceptionBlock = -1;
            constructor (public normalBlock: number) { }
        }
    
        function getBaseTypeLinks(bases: ASTList, baseTypeLinks: TypeLink[]) {
                                         ~~~~~~~
!!! Cannot find name 'ASTList'.
                                                                 ~~~~~~~~
!!! Cannot find name 'TypeLink'.
            if (bases) {
                var len = bases.members.length;
                if (baseTypeLinks == null) {
                    baseTypeLinks = new TypeLink[];
                                                ~~
!!! 'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.
                                        ~~~~~~~~
!!! Cannot find name 'TypeLink'.
                }
                for (var i = 0; i < len; i++) {
                    var baseExpr = bases.members[i];
                    var name = baseExpr;
                    var typeLink = new TypeLink();
                                       ~~~~~~~~
!!! Cannot find name 'TypeLink'.
                    typeLink.ast = name;
                    baseTypeLinks[baseTypeLinks.length] = typeLink;
                }
            }
            return baseTypeLinks;
        }
    
        function getBases(type: Type, typeDecl: TypeDeclaration) {
                                ~~~~
!!! Cannot find name 'Type'.
                                                ~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeDeclaration'.
            type.extendsTypeLinks = getBaseTypeLinks(typeDecl.extendsList, type.extendsTypeLinks);
            type.implementsTypeLinks = getBaseTypeLinks(typeDecl.implementsList, type.implementsTypeLinks);
        }
    
        function addPrototypeField(classType: Type, ast: AST, context: TypeCollectionContext) {
                                              ~~~~
!!! Cannot find name 'Type'.
                                                         ~~~
!!! Cannot find name 'AST'.
                                                                       ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var field = new ValueLocation();
                            ~~~~~~~~~~~~~
!!! Cannot find name 'ValueLocation'.
            field.typeLink = new TypeLink();
                                 ~~~~~~~~
!!! Cannot find name 'TypeLink'.
            field.typeLink.ast = ast;
            field.typeLink.type = classType.instanceType;
    
            var fieldSymbol =
                new FieldSymbol("prototype", ast.minChar,
                    ~~~~~~~~~~~
!!! Cannot find name 'FieldSymbol'.
                                context.checker.locationInfo.unitIndex, true, field);
            fieldSymbol.flags |= (SymbolFlags.Property | SymbolFlags.BuiltIn);
                                  ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                                                         ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
            field.symbol = fieldSymbol;
            fieldSymbol.declAST = ast;
            classType.members.addPublicMember("prototype", fieldSymbol);
        }
    
        export function createNewConstructGroupForType(type: Type) {
                                                             ~~~~
!!! Cannot find name 'Type'.
            var signature = new Signature();
                                ~~~~~~~~~
!!! Cannot find name 'Signature'.
            signature.returnType = new TypeLink();
                                       ~~~~~~~~
!!! Cannot find name 'TypeLink'.
            signature.returnType.type = type.instanceType;
            signature.parameters = [];
    
            type.construct = new SignatureGroup();
                                 ~~~~~~~~~~~~~~
!!! Cannot find name 'SignatureGroup'.
            type.construct.addSignature(signature);     
        }
    
        export function cloneParentConstructGroupForChildType(child: Type, parent: Type) {
                                                                     ~~~~
!!! Cannot find name 'Type'.
                                                                                   ~~~~
!!! Cannot find name 'Type'.
            child.construct = new SignatureGroup();
                                  ~~~~~~~~~~~~~~
!!! Cannot find name 'SignatureGroup'.
            var sig: Signature = null;
                     ~~~~~~~~~
!!! Cannot find name 'Signature'.
    
            if (!parent.construct) {
                createNewConstructGroupForType(parent);
            }
    
            for (var i = 0; i < parent.construct.signatures.length; i++) { 
                sig = new Signature();
                          ~~~~~~~~~
!!! Cannot find name 'Signature'.
                sig.parameters = parent.construct.signatures[i].parameters;
                sig.nonOptionalParameterCount = parent.construct.signatures[i].nonOptionalParameterCount;
                sig.typeCheckStatus = parent.construct.signatures[i].typeCheckStatus;
                sig.declAST = parent.construct.signatures[i].declAST;
                sig.returnType = new TypeLink();
                                     ~~~~~~~~
!!! Cannot find name 'TypeLink'.
                sig.returnType.type = child.instanceType;
                child.construct.addSignature(sig);
            }
    
        }
    
        export var globalId = "__GLO";
    
        export interface IAliasScopeContext {
            topLevelScope: ScopeChain;
                           ~~~~~~~~~~
!!! Cannot find name 'ScopeChain'.
            members: IHashTable;
                     ~~~~~~~~~~
!!! Cannot find name 'IHashTable'.
            tcContext: TypeCollectionContext;
                       ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
        }
    
        function findTypeSymbolInScopeChain(name: string, scopeChain: ScopeChain): Symbol {
                                                                      ~~~~~~~~~~
!!! Cannot find name 'ScopeChain'.
                                                                                   ~~~~~~
!!! Cannot find name 'Symbol'.
            var symbol = scopeChain.scope.find(name, false, true);
    
            if (symbol == null && scopeChain.previous) {
                symbol = findTypeSymbolInScopeChain(name, scopeChain.previous);
            }
    
            return symbol;
        }
    
        function findSymbolFromAlias(alias: AST, context: IAliasScopeContext): Symbol {
                                            ~~~
!!! Cannot find name 'AST'.
                                                                               ~~~~~~
!!! Cannot find name 'Symbol'.
            var symbol: Symbol = null;
                        ~~~~~~
!!! Cannot find name 'Symbol'.
            switch (alias.nodeType) {
                case NodeType.Name:
                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                    var name = (<Identifier>alias).text;
                                 ~~~~~~~~~~
!!! Cannot find name 'Identifier'.
                    var isDynamic = isQuoted(name);
                                    ~~~~~~~~
!!! Cannot find name 'isQuoted'.
    
                    var findSym = (id: string) => {
                        if (context.members) {
                            return context.members.lookup(name);
                        }
                        else {
                            return findTypeSymbolInScopeChain(name, context.topLevelScope);
                        }
                    }
    
                    if (isDynamic) {
                        symbol = context.tcContext.checker.findSymbolForDynamicModule(name, context.tcContext.script.locationInfo.filename, findSym);
                    }
                    else {
                        symbol = findSym(name);
                    }
    
                    break;
    
                case NodeType.Dot:
                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                    var dottedExpr = <BinaryExpression>alias;
                                      ~~~~~~~~~~~~~~~~
!!! Cannot find name 'BinaryExpression'.
                    var op1Sym = findSymbolFromAlias(dottedExpr.operand1, context);
    
                    if (op1Sym && op1Sym.getType()) {
                        symbol = findSymbolFromAlias(dottedExpr.operand2, context);
                    }
    
                    break;
    
                default:
                    break;
            }
    
            if (symbol) {
                var symType = symbol.getType();
                if (symType) {
                    var members = symType.members;
                    if (members) {
                        context.members = members.publicMembers;
                    }
                }
            }
    
            return symbol;
        }
    
        export function preCollectImportTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                   ~~~
!!! Cannot find name 'AST'.
                                                                ~~~
!!! Cannot find name 'AST'.
                                                                              ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
            var typeSymbol: TypeSymbol = null;
                            ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var modType: ModuleType = null;
                         ~~~~~~~~~~
!!! Cannot find name 'ModuleType'.
            var importDecl = <ImportDeclaration>ast;
                              ~~~~~~~~~~~~~~~~~
!!! Cannot find name 'ImportDeclaration'.
            var isExported = hasFlag(importDecl.varFlags, VarFlags.Exported);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                          ~~~~~~~~
!!! Cannot find name 'VarFlags'.
    
            // REVIEW: technically, this call isn't strictly necessary, since we'll find the type during the call to resolveTypeMembers
            var aliasedModSymbol = findSymbolFromAlias(importDecl.alias, { topLevelScope: scopeChain, members: null, tcContext: context });
            var isGlobal = context.scopeChain.container == context.checker.gloMod;
    
            if (aliasedModSymbol) {
                var aliasedModType = aliasedModSymbol.getType();
    
                if (aliasedModType) {
                    modType = <ModuleType>aliasedModType;
                               ~~~~~~~~~~
!!! Cannot find name 'ModuleType'.
                }
            }
    
            typeSymbol = new TypeSymbol(importDecl.id.text, importDecl.minChar,
                             ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                                        context.checker.locationInfo.unitIndex, modType);
    
            typeSymbol.aliasLink = importDecl;
    
            if (context.scopeChain.moduleDecl) {
                typeSymbol.declModule = context.scopeChain.moduleDecl;
            }
            typeSymbol.declAST = importDecl;
            importDecl.id.sym = typeSymbol;
            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,
                                    context.checker.errorReporter, isExported || isGlobal, true, false);
            scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,
                                    context.checker.errorReporter, isExported || isGlobal, false, false);
            return true;
        }
    
        export function preCollectModuleTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                   ~~~
!!! Cannot find name 'AST'.
                                                                ~~~
!!! Cannot find name 'AST'.
                                                                              ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
    
            var moduleDecl: ModuleDeclaration = <ModuleDeclaration>ast;
                            ~~~~~~~~~~~~~~~~~
!!! Cannot find name 'ModuleDeclaration'.
                                                 ~~~~~~~~~~~~~~~~~
!!! Cannot find name 'ModuleDeclaration'.
    
            var isAmbient = hasFlag(moduleDecl.modFlags, ModuleFlags.Ambient);
                            ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                         ~~~~~~~~~~~
!!! Cannot find name 'ModuleFlags'.
            var isEnum = hasFlag(moduleDecl.modFlags, ModuleFlags.IsEnum);
                         ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                      ~~~~~~~~~~~
!!! Cannot find name 'ModuleFlags'.
            var isGlobal = context.scopeChain.container == context.checker.gloMod;
            var isExported = hasFlag(moduleDecl.modFlags, ModuleFlags.Exported);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                          ~~~~~~~~~~~
!!! Cannot find name 'ModuleFlags'.
            var modName = (<Identifier>moduleDecl.name).text;
                            ~~~~~~~~~~
!!! Cannot find name 'Identifier'.
    
            var isDynamic = isQuoted(modName);
                            ~~~~~~~~
!!! Cannot find name 'isQuoted'.
    
            var symbol = scopeChain.scope.findLocal(modName, false, false);
            var typeSymbol: TypeSymbol = null;
                            ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var modType: ModuleType = null;
                         ~~~~~~~~~~
!!! Cannot find name 'ModuleType'.
            if ((symbol == null) || (symbol.kind() != SymbolKind.Type)) {
                                                      ~~~~~~~~~~
!!! Cannot find name 'SymbolKind'.
    
                if (modType == null) {
                    var enclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                            ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                              ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                      ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                             ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                    var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                                   ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                     ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                             ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                    ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                    modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);
                                  ~~~~~~~~~~
!!! Cannot find name 'ModuleType'.
                    if (isEnum) {
                        modType.typeFlags |= TypeFlags.IsEnum;
                                             ~~~~~~~~~
!!! Cannot find name 'TypeFlags'.
                    }
                    modType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                          ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                            ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                    ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                           ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                    modType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                                 ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                   ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                           ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                  ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                    modType.setHasImplementation();
                }
    
                typeSymbol = new TypeSymbol(modName, moduleDecl.minChar,
                                 ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                                            context.checker.locationInfo.unitIndex, modType);
    
                if (context.scopeChain.moduleDecl) {
                    typeSymbol.declModule = context.scopeChain.moduleDecl;
                }
                typeSymbol.declAST = moduleDecl;
                typeSymbol.prettyName = moduleDecl.prettyName;
                scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,
                                        context.checker.errorReporter, isExported || isGlobal, true, isAmbient);
                scopeChain.scope.enter(scopeChain.container, ast, typeSymbol,
                                        context.checker.errorReporter, isExported || isGlobal, false, isAmbient);
                modType.symbol = typeSymbol;
            }
            else {
                if (symbol && symbol.declAST && symbol.declAST.nodeType != NodeType.ModuleDeclaration) {
                                                                           ~~~~~~~~
!!! Cannot find name 'NodeType'.
                    context.checker.errorReporter.simpleError(moduleDecl, "Conflicting symbol name for module '" + modName + "'");
                }
                typeSymbol = <TypeSymbol>symbol;
                              ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
    
                // initialize new private scope for the type
                var publicEnclosedTypes = typeSymbol.type.getAllEnclosedTypes().publicMembers;
                var publicEnclosedTypesTable = (publicEnclosedTypes == null) ? new StringHashTable() : publicEnclosedTypes;
                                                                                   ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                var enclosedTypes = new ScopedMembers(new DualStringHashTable(publicEnclosedTypesTable, new StringHashTable()));
                                        ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                          ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                                            ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
    
                var publicEnclosedAmbientTypes = typeSymbol.type.getAllAmbientEnclosedTypes().publicMembers;
                var publicAmbientEnclosedTypesTable = (publicEnclosedAmbientTypes == null) ? new StringHashTable() : publicEnclosedAmbientTypes;
                                                                                                 ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                var ambientEnclosedTypes = new ScopedMembers(new DualStringHashTable(publicAmbientEnclosedTypesTable, new StringHashTable()));
                                               ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                 ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                                                          ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
    
                var publicMembers = typeSymbol.type.members.publicMembers;
                var publicMembersTable = (publicMembers == null) ? new StringHashTable() : publicMembers;
                                                                       ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                var members = new ScopedMembers(new DualStringHashTable(publicMembersTable, new StringHashTable()));
                                  ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                    ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                                ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
    
                var publicAmbientMembers = typeSymbol.type.ambientMembers.publicMembers;
                var publicAmbientMembersTable = (publicAmbientMembers == null) ? new StringHashTable() : publicAmbientMembers;
                                                                                     ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                var ambientMembers = new ScopedMembers(new DualStringHashTable(publicAmbientMembersTable, new StringHashTable()));
                                         ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                           ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                                              ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
    
                modType = new ModuleType(enclosedTypes, ambientEnclosedTypes);
                              ~~~~~~~~~~
!!! Cannot find name 'ModuleType'.
                if (isEnum) {
                    modType.typeFlags |= TypeFlags.IsEnum;
                                         ~~~~~~~~~
!!! Cannot find name 'TypeFlags'.
                }
                modType.members = members;
                modType.ambientMembers = ambientMembers;
                modType.setHasImplementation();
                modType.symbol = typeSymbol;
    
                typeSymbol.addLocation(moduleDecl.minChar);
                typeSymbol.expansions.push(modType);
    
            }
            if (context.scopeChain.moduleDecl) {
                context.scopeChain.moduleDecl.recordNonInterface();
            }
            // REVIEW: If multiple disparate module decls for the same module don't agree
            // in export privileges, how should we handle it?
            if (isExported) {
                typeSymbol.flags |= SymbolFlags.Exported;
                                    ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
            }
            if ((context.scopeChain.moduleDecl) ||
                (context.scopeChain.container == context.checker.gloMod)) {
                typeSymbol.flags |= SymbolFlags.ModuleMember;
                                    ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
            }
    
            moduleDecl.mod = modType;
            pushTypeCollectionScope(typeSymbol, modType.members,
            ~~~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'pushTypeCollectionScope'.
                                    modType.ambientMembers,
                                    modType.enclosedTypes,
                                    modType.ambientEnclosedTypes,
                                    context, null, null, moduleDecl);
    
            return true;
        }
    
        export function preCollectClassTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                  ~~~
!!! Cannot find name 'AST'.
                                                               ~~~
!!! Cannot find name 'AST'.
                                                                             ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
            var classDecl = <ClassDeclaration>ast;
                             ~~~~~~~~~~~~~~~~
!!! Cannot find name 'ClassDeclaration'.
    
            var classType: Type;
                           ~~~~
!!! Cannot find name 'Type'.
            var instanceType: Type;
                              ~~~~
!!! Cannot find name 'Type'.
            var typeSymbol: TypeSymbol = null;
                            ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var className = (<Identifier>classDecl.name).text;
                              ~~~~~~~~~~
!!! Cannot find name 'Identifier'.
            var alreadyInScope = false;
            var isAmbient = hasFlag(classDecl.varFlags, VarFlags.Ambient);
                            ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                        ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isExported = hasFlag(classDecl.varFlags, VarFlags.Exported);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                         ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isGlobal = context.scopeChain.container == context.checker.gloMod;
            var containerMod = <TypeSymbol>scopeChain.container;
                                ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var foundValSymbol = false;
    
            typeSymbol = <TypeSymbol>scopeChain.scope.findLocal(className, false, true);
                          ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            
            // check the value space, since an override may have been declared with the type's name
            // REVIEW-CLASSES
            if (!typeSymbol) {
                var valTypeSymbol = scopeChain.scope.findLocal(className, false, false);
                
                if (valTypeSymbol &&
                    valTypeSymbol.isType() &&
                    valTypeSymbol.declAST &&
                    valTypeSymbol.declAST.nodeType == NodeType.FuncDecl &&
                                                      ~~~~~~~~
!!! Cannot find name 'NodeType'.
                    (<FuncDecl>valTypeSymbol.declAST).isSignature()) {
                      ~~~~~~~~
!!! Cannot find name 'FuncDecl'.
                    
                    typeSymbol = <TypeSymbol>valTypeSymbol;
                                  ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                    foundValSymbol = true;
                    
                    if (isExported) {
                        typeSymbol.flags |= SymbolFlags.Exported;
                                            ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                    }
                
                    if (isAmbient) {
                        typeSymbol.flags |= SymbolFlags.Ambient;
                                            ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                    }                
                    
                    // the class was never entered into type space, so add it
                    context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,
                                                context.checker.errorReporter, isExported || isGlobal, true, isAmbient);                
                }
            }
            
            if (typeSymbol && !foundValSymbol && (typeSymbol.declAST != classDecl)) {
                typeSymbol = null;
            }
    
            if (typeSymbol == null) {
                var valueSymbol = scopeChain.scope.findLocal(className, false, false);
                classType = new Type();
                                ~~~~
!!! Cannot find name 'Type'.
                classType.setHasImplementation();
                instanceType = new Type();
                                   ~~~~
!!! Cannot find name 'Type'.
                instanceType.setHasImplementation();
                classType.instanceType = instanceType;
                classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                        ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                          ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                  ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                         ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                               ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                 ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                         ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                addPrototypeField(classType, classDecl, context);
                instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                           ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                             ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                     ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                            ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                instanceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                                  ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                    ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                            ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                   ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                typeSymbol = new TypeSymbol(className, classDecl.minChar,
                                 ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                                            context.checker.locationInfo.unitIndex, classType);
                typeSymbol.declAST = classDecl;
                typeSymbol.instanceType = instanceType;
                classType.symbol = typeSymbol;
                instanceType.symbol = typeSymbol;
    
                if (context.scopeChain.moduleDecl) {
                    context.scopeChain.moduleDecl.recordNonInterface();
                    typeSymbol.declModule = context.scopeChain.moduleDecl;
                    typeSymbol.flags |= SymbolFlags.ModuleMember;
                                        ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
    
                if (isExported) {
                    typeSymbol.flags |= SymbolFlags.Exported;
                                        ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
                
                if (isAmbient) {
                    typeSymbol.flags |= SymbolFlags.Ambient;
                                        ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
    
                ast.type = classType;
    
                // class in both name spaces (type for instance type; constructor representative in value space)
                context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,
                                                context.checker.errorReporter, isExported || isGlobal, true, isAmbient);
    
                if (valueSymbol == null) {
                    context.scopeChain.scope.enter(context.scopeChain.container, ast, typeSymbol,
                                                context.checker.errorReporter, isExported || isGlobal, false, isAmbient);
                }
            }
            else {                            
                classType = typeSymbol.type;
                
                // If the instance type is null, a call overload was likely declared before the class constructor
                if (classType.instanceType == null) {
                    classType.instanceType = new Type();
                                                 ~~~~
!!! Cannot find name 'Type'.
                    classType.instanceType.setHasImplementation();
                    classType.instanceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                                         ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                           ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                                   ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                          ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                    classType.instanceType.symbol = classType.symbol;
                    classType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                            ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                              ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                      ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                             ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                    classType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                                   ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                     ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                             ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                    ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                }
                
                instanceType = classType.instanceType;
                ast.type = classType;
            }
            
            // if the class has no declared constructor, either create a default signature or adapt 
            // it's base class's signature group
            if (!classDecl.constructorDecl) {
    
                if (typeSymbol && typeSymbol.declAST && typeSymbol.declAST.type && typeSymbol.declAST.type.call && !(<FuncDecl>typeSymbol.declAST).isOverload) {
                                                                                                                      ~~~~~~~~
!!! Cannot find name 'FuncDecl'.
                    context.checker.errorReporter.duplicateIdentifier(typeSymbol.declAST, typeSymbol.name);
                }
    
                createNewConstructGroupForType(classDecl.type);
            }
    
            classType.typeFlags |= TypeFlags.IsClass;
                                   ~~~~~~~~~
!!! Cannot find name 'TypeFlags'.
            instanceType.typeFlags |= TypeFlags.IsClass;
                                      ~~~~~~~~~
!!! Cannot find name 'TypeFlags'.
    
            getBases(instanceType, classDecl);
            pushTypeCollectionScope(typeSymbol, instanceType.members, instanceType.ambientMembers, null, null,
            ~~~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'pushTypeCollectionScope'.
                                    context, instanceType, classType, null);
            return true;
        }
    
        export function preCollectInterfaceTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                      ~~~
!!! Cannot find name 'AST'.
                                                                   ~~~
!!! Cannot find name 'AST'.
                                                                                 ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
            var interfaceDecl = <InterfaceDeclaration>ast;
                                 ~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'InterfaceDeclaration'.
            var interfaceSymbol: TypeSymbol = null;
                                 ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var interfaceType: Type = null;
                               ~~~~
!!! Cannot find name 'Type'.
            var isExported = hasFlag(interfaceDecl.varFlags, VarFlags.Exported);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                             ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isGlobal = context.scopeChain.container == context.checker.gloMod;
            var alreadyInScope = true;
    
            alreadyInScope = false;
            var interfaceName = (<Identifier>interfaceDecl.name).text;
                                  ~~~~~~~~~~
!!! Cannot find name 'Identifier'.
            interfaceSymbol = <TypeSymbol>scopeChain.scope.findLocal(interfaceName, false, true);
                               ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            if (interfaceSymbol == null) {
                interfaceType = new Type();
                                    ~~~~
!!! Cannot find name 'Type'.
                interfaceSymbol = new TypeSymbol(interfaceName,
                                      ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                                            ast.minChar,
                                            context.checker.locationInfo.unitIndex,
                                            interfaceType);
                interfaceType.symbol = interfaceSymbol;
                // REVIEW: Shouldn't allocate another table for interface privates
                interfaceType.members = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                            ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                              ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                      ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                             ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                interfaceType.ambientMembers = new ScopedMembers(new DualStringHashTable(new StringHashTable(), new StringHashTable()));
                                                   ~~~~~~~~~~~~~
!!! Cannot find name 'ScopedMembers'.
                                                                     ~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'DualStringHashTable'.
                                                                                             ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                                                                                                                    ~~~~~~~~~~~~~~~
!!! Cannot find name 'StringHashTable'.
                interfaceSymbol.declAST = interfaceDecl;
                interfaceSymbol.declModule = context.scopeChain.moduleDecl;
            }
            else {
                alreadyInScope = true;
                interfaceType = interfaceSymbol.type;
            }
    
            if (!interfaceType) {
                interfaceType = context.checker.anyType;
            }
    
            ast.type = interfaceType;
            getBases(interfaceType, interfaceDecl);
    
            if (isExported) {
                interfaceSymbol.flags |= SymbolFlags.Exported;
                                         ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
            }
    
            if (context.scopeChain.moduleDecl) {
                interfaceSymbol.flags |= SymbolFlags.ModuleMember;
                                         ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
            }
    
            if (!alreadyInScope) {
                context.scopeChain.scope.enter(context.scopeChain.container, ast,
                                                interfaceSymbol, context.checker.errorReporter, isGlobal || isExported, true, false); // REVIEW: Technically, interfaces should be ambient
            }
            pushTypeCollectionScope(interfaceSymbol, interfaceType.members, interfaceType.ambientMembers, null, null,
            ~~~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'pushTypeCollectionScope'.
                                    context, interfaceType, null, null);
            return true;
        }
    
        export function preCollectArgDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                    ~~~
!!! Cannot find name 'AST'.
                                                                 ~~~
!!! Cannot find name 'AST'.
                                                                               ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
            var argDecl = <ArgDecl>ast;
                           ~~~~~~~
!!! Cannot find name 'ArgDecl'.
            if (hasFlag(argDecl.varFlags, VarFlags.Public | VarFlags.Private)) {
                ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                          ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                                                            ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                var field = new ValueLocation();
                                ~~~~~~~~~~~~~
!!! Cannot find name 'ValueLocation'.
                var isPrivate = hasFlag(argDecl.varFlags, VarFlags.Private);
                                ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                          ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                var fieldSymbol =
                    new FieldSymbol(argDecl.id.text, argDecl.minChar,
                        ~~~~~~~~~~~
!!! Cannot find name 'FieldSymbol'.
                                    context.checker.locationInfo.unitIndex,
                                    !hasFlag(argDecl.varFlags, VarFlags.Readonly),
                                     ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                               ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                                    field);
                fieldSymbol.transferVarFlags(argDecl.varFlags);
                field.symbol = fieldSymbol;
                fieldSymbol.declAST = ast;
                argDecl.parameterPropertySym = fieldSymbol;
    
                context.scopeChain.scope.enter(context.scopeChain.container, ast,
                                                fieldSymbol, context.checker.errorReporter, !isPrivate, false, false);
    
                field.typeLink = getTypeLink(argDecl.typeExpr, context.checker, argDecl.init == null);
                                 ~~~~~~~~~~~
!!! Cannot find name 'getTypeLink'.
                argDecl.sym = fieldSymbol;
            }
            return false;
        }
    
        export function preCollectVarDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                    ~~~
!!! Cannot find name 'AST'.
                                                                 ~~~
!!! Cannot find name 'AST'.
                                                                               ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
            var varDecl = <VarDecl>ast;
                           ~~~~~~~
!!! Cannot find name 'VarDecl'.
            var isAmbient = hasFlag(varDecl.varFlags, VarFlags.Ambient);
                            ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                      ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isExported = hasFlag(varDecl.varFlags, VarFlags.Exported);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                       ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isGlobal = context.scopeChain.container == context.checker.gloMod;
            var isProperty = hasFlag(varDecl.varFlags, VarFlags.Property);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                       ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isStatic = hasFlag(varDecl.varFlags, VarFlags.Static);
                           ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                     ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isPrivate = hasFlag(varDecl.varFlags, VarFlags.Private);
                            ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                      ~~~~~~~~
!!! Cannot find name 'VarFlags'.
            var isOptional = hasFlag(varDecl.id.flags, ASTFlags.OptionalName);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                       ~~~~~~~~
!!! Cannot find name 'ASTFlags'.
    
            if (context.scopeChain.moduleDecl) {
                context.scopeChain.moduleDecl.recordNonInterface();
            }
            if (isProperty ||
                isExported ||
                (context.scopeChain.container == context.checker.gloMod) ||
                context.scopeChain.moduleDecl) {
                if (isAmbient) {
                    var existingSym =
                        <FieldSymbol>scopeChain.scope.findLocal(varDecl.id.text, false, false);
                         ~~~~~~~~~~~
!!! Cannot find name 'FieldSymbol'.
                    if (existingSym) {
                        varDecl.sym = existingSym;
                        return false;
                    }
                }
    
                // Defensive error detection...
                if (varDecl.id == null) {
                    context.checker.errorReporter.simpleError(varDecl, "Expected variable identifier at this location");
                    return false;
                }
    
                var field = new ValueLocation();
                                ~~~~~~~~~~~~~
!!! Cannot find name 'ValueLocation'.
                var fieldSymbol =
                    new FieldSymbol(varDecl.id.text, varDecl.minChar,
                        ~~~~~~~~~~~
!!! Cannot find name 'FieldSymbol'.
                                    context.checker.locationInfo.unitIndex,
                                    (varDecl.varFlags & VarFlags.Readonly) == VarFlags.None,
                                                        ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                                                                              ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                                    field);
                fieldSymbol.transferVarFlags(varDecl.varFlags);
                if (isOptional) {
                    fieldSymbol.flags |= SymbolFlags.Optional;
                                         ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
                field.symbol = fieldSymbol;
                fieldSymbol.declAST = ast;
                if ((context.scopeChain.moduleDecl) ||
                    (context.scopeChain.container == context.checker.gloMod)) {
                    fieldSymbol.flags |= SymbolFlags.ModuleMember;
                                         ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                    fieldSymbol.declModule = context.scopeChain.moduleDecl;
                }
    
                // if it's static, enter it into the class's member list directly
                if (hasFlag(varDecl.varFlags, VarFlags.Property) && isStatic && context.scopeChain.classType) {
                    ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                              ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                    if (!context.scopeChain.classType.members.publicMembers.add(varDecl.id.text, fieldSymbol)) {
                        context.checker.errorReporter.duplicateIdentifier(ast, fieldSymbol.name);
                    }
                    fieldSymbol.container = context.scopeChain.classType.symbol;
                }
                else {
                    context.scopeChain.scope.enter(context.scopeChain.container,
                                                    ast,
                                                    fieldSymbol,
                                                    context.checker.errorReporter,
                                                    !isPrivate && (isProperty || isExported || isGlobal || isStatic),
                                                    false,
                                                    isAmbient);
                }
    
                if (hasFlag(varDecl.varFlags, VarFlags.Exported)) {
                    ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                              ~~~~~~~~
!!! Cannot find name 'VarFlags'.
                    fieldSymbol.flags |= SymbolFlags.Exported;
                                         ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
    
                field.typeLink = getTypeLink(varDecl.typeExpr, context.checker,
                                 ~~~~~~~~~~~
!!! Cannot find name 'getTypeLink'.
                                            varDecl.init == null);
                varDecl.sym = fieldSymbol;
            }
            return false;
        }
    
        export function preCollectFuncDeclTypes(ast: AST, parent: AST, context: TypeCollectionContext) {
                                                     ~~~
!!! Cannot find name 'AST'.
                                                                  ~~~
!!! Cannot find name 'AST'.
                                                                                ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var scopeChain = context.scopeChain;
    
            // REVIEW: This will have to change when we move to "export"
            if (context.scopeChain.moduleDecl) {
                context.scopeChain.moduleDecl.recordNonInterface();
            }
    
            var funcDecl = <FuncDecl>ast;
                            ~~~~~~~~
!!! Cannot find name 'FuncDecl'.
            var fgSym: TypeSymbol = null;
                       ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var nameText = funcDecl.getNameText();
            var isExported = hasFlag(funcDecl.fncFlags, FncFlags.Exported | FncFlags.ClassPropertyMethodExported);
                             ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                        ~~~~~~~~
!!! Cannot find name 'FncFlags'.
                                                                            ~~~~~~~~
!!! Cannot find name 'FncFlags'.
            var isStatic = hasFlag(funcDecl.fncFlags, FncFlags.Static);
                           ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                      ~~~~~~~~
!!! Cannot find name 'FncFlags'.
            var isPrivate = hasFlag(funcDecl.fncFlags, FncFlags.Private);
                            ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                       ~~~~~~~~
!!! Cannot find name 'FncFlags'.
            var isConstructor = funcDecl.isConstructMember() || funcDecl.isConstructor;
            var containerSym:TypeSymbol = <TypeSymbol> (((funcDecl.isMethod() && isStatic) || funcDecl.isAccessor()) && context.scopeChain.classType ? context.scopeChain.classType.symbol : context.scopeChain.container);
                             ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                                           ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
            var containerScope: SymbolScope = context.scopeChain.scope;
                                ~~~~~~~~~~~
!!! Cannot find name 'SymbolScope'.
            var isGlobal = containerSym == context.checker.gloMod;
            var isOptional = funcDecl.name && hasFlag(funcDecl.name.flags, ASTFlags.OptionalName);
                                              ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                                           ~~~~~~~~
!!! Cannot find name 'ASTFlags'.
            var go = false;
            var foundSymbol = false; 
    
            // If this is a class constructor, the "container" is actually the class declaration
            if (isConstructor && hasFlag(funcDecl.fncFlags, FncFlags.ClassMethod)) {
                                 ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                            ~~~~~~~~
!!! Cannot find name 'FncFlags'.
                containerSym = <TypeSymbol>containerSym.container;
                                ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                containerScope = scopeChain.previous.scope;
            }
    
            funcDecl.unitIndex = context.checker.locationInfo.unitIndex;
            
            // If the parent is the constructor, and this isn't an instance method, skip it.
            // That way, we'll set the type during scope assignment, and can be sure that the
            // function will be placed in the constructor-local scope
            if (!funcDecl.isConstructor &&
                containerSym &&
                containerSym.declAST &&
                containerSym.declAST.nodeType == NodeType.FuncDecl &&
                                                 ~~~~~~~~
!!! Cannot find name 'NodeType'.
                (<FuncDecl>containerSym.declAST).isConstructor &&
                  ~~~~~~~~
!!! Cannot find name 'FuncDecl'.
                !funcDecl.isMethod()) {
                return go;
            }        
    
            // Interfaces and overloads
            if (hasFlag(funcDecl.fncFlags, FncFlags.Signature)) {
                ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                           ~~~~~~~~
!!! Cannot find name 'FncFlags'.
                var instType = context.scopeChain.thisType;                       
    
                // If the function is static, search in the class type's
                if (nameText && nameText != "__missing") {
                    if (isStatic) {
                        fgSym = containerSym.type.members.allMembers.lookup(nameText);
                    }
                    else {
                        // REVIEW: This logic should be symmetric with preCollectClassTypes
                        fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);
                                 ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                        
                        // If we could not find the function symbol in the value context, look
                        // in the type context.
                        // This would be the case, for example, if a class constructor override
                        // were declared before a call override for a given class
                        if (fgSym == null) {
                            fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, true);
                                     ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                        }
                    }
                    
                    if (fgSym) {
                        foundSymbol = true;
                        
                        // We'll combine ambient and non-ambient funcdecls during typecheck (for contextual typing).,
                        // So, if they don't agree, don't use the symbol we've found                    
                        if (!funcDecl.isSignature() && (hasFlag(funcDecl.fncFlags, FncFlags.Ambient) != hasFlag(fgSym.flags, SymbolFlags.Ambient))) {
                                                        ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                                                   ~~~~~~~~
!!! Cannot find name 'FncFlags'.
                                                                                                        ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                                                                                             ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                           fgSym = null;
                        }
                    }                
                }
                
                // a function with this symbol has not yet been declared in this scope
                // REVIEW: In the code below, we need to ensure that only function overloads are considered
                //  (E.g., if a vardecl has the same id as a function or class, we may use the vardecl symbol
                //  as the overload.)  Defensively, however, the vardecl won't have a type yet, so it should
                //  suffice to just check for a null type when considering the overload symbol in
                //  createFunctionSignature
                if (fgSym == null) {
                    if (!(funcDecl.isSpecialFn())) {                    
                        fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, null, !foundSymbol).declAST.type.symbol;
                    }
                    else {
                        fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, containerSym, false).declAST.type.symbol;                                                                         
                    }
                    
                    // set the symbol's declAST, which will point back to the first declaration (symbol or otherwise)
                    // related to this symbol
                    if (fgSym.declAST == null || !funcDecl.isSpecialFn()) {
                        fgSym.declAST = ast;
                    }
                }
                else { // there exists a symbol with this name
                    
                    if ((fgSym.kind() == SymbolKind.Type)) {
                                         ~~~~~~~~~~
!!! Cannot find name 'SymbolKind'.
    
                        fgSym = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, false).declAST.type.symbol;
                    }
                    else {
                        context.checker.errorReporter.simpleError(funcDecl, "Function or method '" + funcDecl.name.actualText + "' already declared as a property");
                    }
                }
             
                if (funcDecl.isSpecialFn() && !isStatic) {
                    funcDecl.type = instType ? instType : fgSym.type; 
                }
                else {
                    funcDecl.type = fgSym.type;
                }            
            }
            else {
                // declarations
                
                if (nameText) {
                    if (isStatic) {
                        fgSym = containerSym.type.members.allMembers.lookup(nameText);
                    }
                    else {
                        // in the constructor case, we want to check the parent scope for overloads
                        if (funcDecl.isConstructor && context.scopeChain.previous) {
                            fgSym = <TypeSymbol>context.scopeChain.previous.scope.findLocal(nameText, false, false);
                                     ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                        }
                        
                        if (fgSym == null) {
                            fgSym = <TypeSymbol>containerScope.findLocal(nameText, false, false);
                                     ~~~~~~~~~~
!!! Cannot find name 'TypeSymbol'.
                        }
                    }
                    if (fgSym) {
                        foundSymbol = true;
                        
                        if (!isConstructor && fgSym.declAST.nodeType == NodeType.FuncDecl && !(<FuncDecl>fgSym.declAST).isAccessor() && !(<FuncDecl>fgSym.declAST).isSignature()) {
                                                                        ~~~~~~~~
!!! Cannot find name 'NodeType'.
                                                                                                ~~~~~~~~
!!! Cannot find name 'FuncDecl'.
                                                                                                                                           ~~~~~~~~
!!! Cannot find name 'FuncDecl'.
                            fgSym = null;
                            foundSymbol = false;
                        }
                    }                
                }
    
                // REVIEW: Move this check into the typecheck phase?  It's only being run over properties...
                if (fgSym &&
                    !fgSym.isAccessor() &&
                    fgSym.type &&
                    fgSym.type.construct &&
                    fgSym.type.construct.signatures != [] &&
                    (fgSym.type.construct.signatures[0].declAST == null ||
                        !hasFlag(fgSym.type.construct.signatures[0].declAST.fncFlags, FncFlags.Ambient)) &&
                         ~~~~~~~
!!! Cannot find name 'hasFlag'.
                                                                                      ~~~~~~~~
!!! Cannot find name 'FncFlags'.
                    !funcDecl.isConstructor) {
                    context.checker.errorReporter.simpleError(funcDecl, "Functions may not have class overloads");
                }
    
                if (fgSym && !(fgSym.kind() == SymbolKind.Type) && funcDecl.isMethod() && !funcDecl.isAccessor() && !funcDecl.isConstructor) {
                                               ~~~~~~~~~~
!!! Cannot find name 'SymbolKind'.
                    context.checker.errorReporter.simpleError(funcDecl, "Function or method '" + funcDecl.name.actualText + "' already declared as a property");
                    fgSym.type = context.checker.anyType;
                }
                var sig = context.checker.createFunctionSignature(funcDecl, containerSym, containerScope, fgSym, !foundSymbol);
    
                // it's a getter or setter function                                   
                if (((!fgSym || fgSym.declAST.nodeType != NodeType.FuncDecl) && funcDecl.isAccessor()) || (fgSym && fgSym.isAccessor())) {
                                                          ~~~~~~~~
!!! Cannot find name 'NodeType'.
                    funcDecl.accessorSymbol = context.checker.createAccessorSymbol(funcDecl, fgSym, containerSym.type, (funcDecl.isMethod() && isStatic), true, containerScope, containerSym);
                }
    
                funcDecl.type.symbol.declAST = ast;
                if (funcDecl.isConstructor) { // REVIEW: Remove when classes completely replace oldclass
                    go = true;
                };
            }
            if (isExported) {
                if (funcDecl.type.call) {
                    funcDecl.type.symbol.flags |= SymbolFlags.Exported;
                                                  ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
                
                // Accessors are set to 'exported' above
                if (fgSym && !fgSym.isAccessor() && fgSym.kind() == SymbolKind.Type && fgSym.type.call) {
                                                                    ~~~~~~~~~~
!!! Cannot find name 'SymbolKind'.
                    fgSym.flags |= SymbolFlags.Exported;
                                   ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                }
            }
            if (context.scopeChain.moduleDecl && !funcDecl.isSpecialFn()) {
                funcDecl.type.symbol.flags |= SymbolFlags.ModuleMember;
                                              ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
                funcDecl.type.symbol.declModule = context.scopeChain.moduleDecl;
            }
    
            if (fgSym && isOptional) {
                fgSym.flags |= SymbolFlags.Optional;
                               ~~~~~~~~~~~
!!! Cannot find name 'SymbolFlags'.
            }
    
            return go;
        }
    
        export function preCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {
                                             ~~~
!!! Cannot find name 'AST'.
                                                          ~~~
!!! Cannot find name 'AST'.
                                                                       ~~~~~~~~~~
!!! Cannot find name 'IAstWalker'.
            var context: TypeCollectionContext = walker.state;
                         ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
            var go = false;
            var scopeChain = context.scopeChain;
    
            if (ast.nodeType == NodeType.Script) {
                                ~~~~~~~~
!!! Cannot find name 'NodeType'.
                var script: Script = <Script>ast;
                            ~~~~~~
!!! Cannot find name 'Script'.
                                      ~~~~~~
!!! Cannot find name 'Script'.
                context.script = script;
                go = true;
            }
            else if (ast.nodeType == NodeType.List) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = true;
            }
            else if (ast.nodeType == NodeType.ImportDeclaration) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectImportTypes(ast, parent, context);
            }
            else if (ast.nodeType == NodeType.With) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = false;
            }
            else if (ast.nodeType == NodeType.ModuleDeclaration) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectModuleTypes(ast, parent, context);
            }
            else if (ast.nodeType == NodeType.ClassDeclaration) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectClassTypes(ast, parent, context);
            }
            else if (ast.nodeType == NodeType.Block) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = true;
            }
            else if (ast.nodeType == NodeType.InterfaceDeclaration) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectInterfaceTypes(ast, parent, context);
            }
            // This will be a constructor arg because this pass only traverses
            // constructor arg lists
            else if (ast.nodeType == NodeType.ArgDecl) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectArgDeclTypes(ast, parent, context);
            }
            else if (ast.nodeType == NodeType.VarDecl) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectVarDeclTypes(ast, parent, context);
            }
            else if (ast.nodeType == NodeType.FuncDecl) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                go = preCollectFuncDeclTypes(ast, parent, context);
            }
            else {
                if (ast.isStatementOrExpression() && context.scopeChain.moduleDecl) {
                    context.scopeChain.moduleDecl.recordNonInterface();
                }
            }
            walker.options.goChildren = go;
            return ast;
        }
    
        export function postCollectTypes(ast: AST, parent: AST, walker: IAstWalker) {
                                              ~~~
!!! Cannot find name 'AST'.
                                                           ~~~
!!! Cannot find name 'AST'.
                                                                        ~~~~~~~~~~
!!! Cannot find name 'IAstWalker'.
            var context: TypeCollectionContext = walker.state;
                         ~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'TypeCollectionContext'.
    
            if (ast.nodeType == NodeType.ModuleDeclaration) {
                                ~~~~~~~~
!!! Cannot find name 'NodeType'.
                popTypeCollectionScope(context);
                ~~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'popTypeCollectionScope'.
            }
            else if (ast.nodeType == NodeType.ClassDeclaration) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                popTypeCollectionScope(context);
                ~~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'popTypeCollectionScope'.
            }
            else if (ast.nodeType == NodeType.InterfaceDeclaration) {
                                     ~~~~~~~~
!!! Cannot find name 'NodeType'.
                popTypeCollectionScope(context);
                ~~~~~~~~~~~~~~~~~~~~~~
!!! Cannot find name 'popTypeCollectionScope'.
            }
            return ast;
        }
    
    }